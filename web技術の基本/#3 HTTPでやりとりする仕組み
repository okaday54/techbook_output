HTTPの歴史
1991年に登場し,バージョアップしてきた
現在は1999年に規定されたhttp/1.1が主流

データのやりとりを高速化することを目的に
最新：2015年のHTTP/2が誕生

HTTPの基本動作
ブラウザとサーバーのやり取りをHTTPメッセージで行う
ブラウザからの要求：HTTPリクエスト
サーバからの応答：HTTPレスポンス

HTTPのバージョンはブラウザとサーバーの両方が対応しないといけない
違う場合は下位のバージョンが使われる

02
HTTPメッセージ

HTTPリクエスト
①リクエスト行
メソッド、パス名、バージョン、などの情報を記載
②メッセージヘッダー
ブラウザの種類、対応しているデータのタイプ、データの圧縮方法、言語などの情報を伝える
③空白行
一行空けることでメッセージヘッダーの終わりを伝える
④メッセージボディ
webサーバーにデータを送るために使われる。空の場合もあり。

HTTPレスポンス
①ステータス行
ブラウザにサーバー内での処理結果を伝える
バージョン、ステータスコード：3桁の数字、テキストフレーズ
②メッセージヘッダー
サーバーのソフトウェア情報、返信するデータのタイプ、データの圧縮方法など
③空白行
同意
④メッセージボディ
HTMLや画像などデータを格納する場所

03
HTTPメソッド

HEAD HTTPヘッダーの情報のみを取得。更新日時やデータのサイズを取得など。
GET HTMLや画像を取得
POST フォームに入力したパスワードなどのデータを転送する場合。セキュリティが必要な場面で使う。
PUT データアップロード、サーバー上のファイルを置き換えることができるため制限されている場合が多い
DELETE 指定したファイルを削除。制限されている場合が多い。
CONNECT 別のサーバーを中継する場合。悪用した攻撃があるため制限されいる場合が多い。
OPTIONS 利用できるHTTPメソッドを問い合わせる
TRACE ブラウザとサーバーの経路をチェック。悪用した攻撃があるため制限されいる場合が多い。

※GETはURLにユーザー名やパスワードが含まれるため履歴に残ってしまう
※個人情報を扱う場合はPOST

04
HTTPリクエストに対しサーバー内での処理結果：ステータスコード、③桁の数字
１００〜５００の５分類

100:リクエスト継続を通知
200:正常
301:リクエストされたコンテンツは移動しました
302:一時的に移動された
304:コンテンツ未更新、ブラウザに一時保存されたコンテンツが表示
400:リクエストが不正
404:コンテンツ未検出、ページが見つかりません
500:リクエスト処理中にサーバー内部でエラー発生
503:アクセス集中やメンテナンスで処理不可

05
メッセージヘッダー
複数のヘッダーフィールドと呼ばれる行から成り立っている

一般ヘッダーフィールド
HTTPメッセージ全体の付加情報を示す
connection, date, upgrade

リクエストヘッダーフィールド
クライアントの固有情報：User-Agentなど
PCかスマホを判別して対応した表示をさせる
Host, Refere直前に訪れたURL, User-Agent

レスポンスヘッダーフィールド
サーバ機能を提供するプロダクト情報：Serverなど
詳細がわかってしまうと攻撃対象となるため制限することも可能
Location, Server

エンティティヘッダーフィールド
メッセージボディに含まれるデータの付加情報を示す。Content-Typeなどがある。
Allow利用可能なHTTPメソッド一覧, Content-Encordingデータ変換方式, Content-Language使用言語, Content-Lengthサイズ, Content-Type種類, Expires有効期限, Last-Modified最終更新時刻

※ヘッダーフィールドは独自に定義したものを利用するのも可能

06 TCPによるデータ通信
TCPでまず通信できる状態なのかを確認→コネクションと呼ばれる通信経路を確立したうえでデータのやりとりを行う。
コネクションは３回

①クライアントからの接続要求：
SYNパケットと呼ばれるデータを送る
②クライアントに確認応答とサーバーからの接続要求(SYN+ACK)：
確認応答を受け取り完了したと判断する→ACKパット→サーバーから接続可能であることを伝える→同時にクライアントへの接続要求としてSYNを送る

③サーバーに確認応答：
サーバーからの要求に対しクライアントがACKパケットを送る
お互いにSYNとACKを送り、双方向で通信が可能なことを確認しコネクションが確立されデータのやりとりが開始される。

07 HTTP/1.1
コネクションを継続して利用する方式、HTTPキープアライブ
→以前のverだと画像の度にコネクションを確立していた

HTTPパイプライン
複数のHTTPリクエストを送ることができる。時短。

08 HTTP/2
Googleが提案したSPDYがベース。通信の高速化が目的。

仮想的な通信経路、ストリームを作成し高速化
→HTTP/1.1のパイプランだと順番どおりに応答するため詰まると待ち時間が発生

09 HHTP/2での改良点
バイナリ形式でのやりとりが可能：返還時間が不要なのとブラウザの負担軽減
ヘッダー圧縮：HPACKと呼ばれる圧縮方式で差分だけを送る。
サーバープッシュ：サーバー側で必要なファイルを判断し先読みで画像データなどを送る。

10 HTTPSの仕組み
暗号化方式：SSLやTLSを利用

盗聴防止：データを暗号化して送る
改ざん防止：ハッシュ値を比較して改ざんを検知
なりすまし防止：SSLサーバー証明書から運用元が確認できる

※SSLサーバーにもランクがある：特に高いEVSSLは緑で表示

11 HTTPSのやりとり
SSL/TLSハンドシェイク
暗号化方式の決定
↓
通信相手の証明
↓
鍵の交換
↓
暗号化方式の確認
↓
通信開始

12 
HTTPはシンプルなプロトコル
特徴：ステートレス、状態を保持しない

反対にステートフル、状態を保持
例)ショッピングサイトの買い物かご、データを一時保存

13 Cookie クッキー
状態を保持し管理する
ブラウザを閉じると削除→セッションCookie
有効期限も設定できる。セキュリティ注意。

14 セッション
商品を選ぶ→かごに入れる→購入の流れをセッションと呼ぶ
Cookieを用いてセッション管理

セッションIDNS：番号
ユーザー名
パスワード
買い物かご：
Cookieなどを利用しセッションIDを送信、webサーバーで保存管理

15 URI
リソースを識別
リソースが存在する場所を示すものをURL
リソースの名前を示すものURN

リクエストURI

絶対URI形式
ホスト名からすべて記述

相対URI形式←通常は記述を簡略化したこちらを利用
パス名のみ記述

パーセントエンコーディング
予約文字でも非予約文字でもない文字でURIを利用
16進数
