01

webアプリケーション
→ ブラウザ上で動作するアプリケーション

負荷分散のため３層構造になっている → 層ごとにサーバーを配置
また、回収範囲を限定できるのでコストを抑えることができる。
・プレゼンテーション層
・アプリケーション層
・データ層

02 MVCモデル
モデル：データ処理、業務処理
ビュー：画面表示
コントローラー：viewとモデルに指示を出す

PC → プレゼンテーション層 → アプリケーション層 → データ層
                         contoroller/view → model

３層アーキテクチャはシステム全体の設計方針
MVCはサーバーサイド・スクリプトの設計方針

03 フレームワーク
一般的な処理の雛形を準備し開発できるようにしたもの

開発者の力量の差による品質のバラつきも出にくくなるメリットがある

Javaベース
Java EE, Struts, Spring Boot,

PHP
Cake PHP

Ruby
Ruby on rails

04 Webサーバー
クライアントに対し窓口の役割を果たす
サーバーが動作しなくなると「現在停止しています」のメッセージすら送れなくなる。
機器を増やし負担を減らすだけでなく、別のサーバーだけでサービスを続けられるようにする、冗長化の構成をとることが一般的。

webサーバー：静的ページのデータ
APサーバー：動的処理。サーバーサイド・プログラム

求められるサーバー性能
・レスポンス
静的：HDDの読み取り速度、それをサポートするメモリの容量
動的：アプリケーションとの連携処理を早くするため、CPUの性能
が求められる。

05 Webクライアント
ブラウザのこと
webシステムを利用するためのプログラム
サーバーとの橋渡し

クライアントプログラム
ブラウザで十分に機能を活かせない場合はクライアントプログラムが用意される
例) スマホ向けFaceBook, twitter, ２ちゃんねる
専用ブラウザとよばれる

06 アプリケーションサーバー
３層アーキテクチャにおいては最も多機能なサーバー。中核。メモリ容量やCPU性能が重視される。

セッション管理機能
クライアントごとに発行しログイン状況などを把握
ログインからログアウトまでを１セッション

トランザクション管理機能
セッション中に行われる作業の最小単位
例) 宿泊予約 / それぞれが1トランザクション
・ログイン
・空室確認→１部屋減らす→予約者情報を追加→予約の確定
・ログアウト

07 データベース管理システム
DBMS
データの管理は、データベースの構造が複雑になったり、データ量が多くなると検索負荷が増える。
サーバー機器の性能が重要。データ消去への対策も必要。

冗長化とデータの同期
保持するデータの保全は非常に重要。基本的に冗長化構成をとる。
方法
・ミラーリング：複数のDBに同時に同じ更新を行う。プリンシパル(トップの階級の意味)とミラー。
・レプリケーション：マスタからスレープに更新履歴を送る。スレープは
・シェアードディスク：サーバー(DBMS)と大元のデータストレージ(データベース)を分ける
→データベースは冗長化されないので強い機器を設置する

08 キャッシュサーバー
リクエストに対するレスポンスを覚えておくこと
記憶 = キャッシュ
文書や画像→ コンテンツキャッシュ
検索要求の結果→ クエリキャッシュ

キャッシュには有効期限を設定し、新しい情報を記憶し直すようにする必要がある

CDN
キャッシュサーバーの集合体。世界各地に設置されたコンテンツキャッシュサーバーで構成されるネットワーク。
あらかじめ(定期的に)大容量の画像と動画のキャッシュを取得しておき、CDNが最も近いサーバが対応するようにしレスポンスを早くする

09 Ajax
・同期通信
サーバーとクライアントが交互に処理を行い、同調して処理を行うこと。
表示に時間がかかる。サーバーに負担がかかかる。

・Ajax エイジャックス
同期通信の欠点を補うために登場
ブラウザ上で、クライアントサイド・スクリプトとして動く、Javaccriptが直接サーバーと通信を行い表示するHTMLを更新する
JavascriptはDOMを使って操作。データ量少なく負担が少ない

ブラウザ上で動くJavascriptが通信を行うため、非同期通信が可能。
例) Google検索のサジェスト機能(検索候補の表示), GoogleMapの地図表示

10 Webプログラミング
プログラミング言語を使ってwebアプリケーションを開発すること
・サーバーサイド：効率的な手順、DBとのやり取りにSQL言語の知識が必要
・クライアントサイド：ブラウザごとの動作の違いを吸収する必要がある。スマホアプリ、デスクトップアプリの知識も必要。レスポンシブも？
に分かれる

11 Web API
ユーザーではなくプログラムが直接サービスを利用する窓口
天気予報API、検索API、Twitter投稿APIなど

プログラム同士のやりとり
主流：XML-RPC, SOAP, REST

12 マッシュアップ
複数のwebサービスを組み合わせて新たなwebサービスを生み出すこと
例) 位置情報から天気を取得その日に着る服を提案するサービス、位置情報から取得した特情報とレシピ情報から献立を提案する
※元のwebAPIが仕様変更に対応しないといけない、終了の場合は代わりを見つけないといけない

13 CGI
リクエストに対し用意されたCGIプログラムが起動、webサーバー上で実行したときの結果を返信
APサーバー不要のため小規模な動的ページ作成に多く用いられる

データの渡し方
・コマンドライン引数の渡し方
・パス渡し
・GETメソッド、POSTメソッドで渡す

14 サーバー間の連携
サーバー機器が別
割当のIPアドレスを指定して通信

サーバ機器が同じ
割当のIP or 特殊IP(127.0.0.1)を指定で通信

使用するプロトコル
種類： HTTP, AJP, Websocket

DBMSは独自プロトコル
APサーバーとDBMS間での通信は、ODBCというAPIが開発されている

