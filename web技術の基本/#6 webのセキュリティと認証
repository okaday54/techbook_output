01 webシステムのセキュリティ
情報セキュリティの３要素
・機密性：関係ない人は見れない
・安全性：破壊・改ざん・消去されない状態を確保
・可用性：必要なときにアクセスできる状態

頭文字をとって：CIA

何らかの損失が発生する可能性のことを、「リスク」と呼ぶ
リスクを現実化させる要因：脅威
脅威に対する弱み：脆弱性

実際に不正アクセスを受け、損失が現実化すること
→ リスクが顕在化する

02 

パスワードクラッキング
ユーザーのPWを盗もうとすること
主な手法
・辞職攻撃
・ブルーとフォース攻撃

DoS攻撃
大量アクセスでサーバーを停止に陥らせる
主な手段
・SYN Flood攻撃
・F5攻撃

対策
不自然なアクセス増加を検知し、送信元のIPからのアクセスを遮断

03 webシステムの特徴を利用した攻撃
セッションハイジャック
cookieやセッションIDを取得しシステムを利用できるようにする
例) ネットワークの盗聴、脆弱性を突く
対策：通信の暗号化、異なるIPアドレスからの接続は強制ログアウトさせる など

ディレクトリトラバーサル
階層の指定から公開されていないディレクトリにアクセス
webサーバー自体のログインパスワードを取得する方法

04
XSS:クロスサイトスクリプティング
→リンクを踏ませ悪意のあるスクリプトを自動的に書き込んでしまうようにする

CSRF:クロスサイトリクエストフォージェリ
→リンクを踏ませパスワードの変更など意図しない操作を行う。人間の手によるアクセスかどうかを判別し対策する。

SQLインジェクション
→ DBに正しいと誤解させてログインをする方法

05 webシステムの脆弱性
セキュリティホール
権限を持たないユーザーに実行されてしまう、見えるべきでない情報が第三者に見えてしまう

どのようなシステムにも脆弱性は残ってしまう
脆弱性情報データベースで管理され、一般公開されている。
修正プログラムで被害の拡散を防ぐ。

ゼロデイ攻撃
修正プログラムが開発される前に攻撃すること

対策：不要なソフトはインストールしないようにする

06 ファイアーウォール
送受信されるデータを監視して通信の許可と拒否を行うもの

パケットフィルタ型ファイアーウォール
送受信されるデータのIPアドレスなどから判断する


不要な通信を防ぐのがセキュリティの第一歩
社内：IPアドレスで制限
不特定多数：ポート番号で制限、手段を限定

07
IDSとIPS
通信を監視し不正アクセスや異常通信を検知する装置

IDS：異常があったことをメールなどで通知するだけ
IPS：即座に通信の遮断を行う。誤検知でも遮断されてしまう。

シグネチャ型：不正検知型。既知の登録された攻撃パターンと一致するものを不正アクセスと判断する。
アノマリー型：普段の通信と大きく異なるもの通常発生しないものを不正アクセスとして検知する。アクセス量が急増するF5攻撃も検知できる。

08 
WAF：やりとりされるパケットの中身を見て悪意のあるデータが含まれていないかをチェック
→セキュリティ効果もが高いが機器自体も高価で運用コストもかかる。必要かどうかをよく検討する。

ブラックリスト型
WAFの開発元が提供するものを利用。新たな攻撃手法は追加されるまで対応できない。自分で編集することは可能。

ホワイトリスト型
正常パターンを登録。正確なホワイトリストの作成に専門性が必要。WAFの運用にコストがかかってしまいがち。

09 
暗号化とは
平文(データ)を暗号化アルゴリズムで読み取れない暗号文にすること
暗号を平文に戻すことを復号と呼ぶ。

通信経路自体を暗号化しておくことで盗聴が成功したとしても読み取れず被害が出ない。

保存データの暗号化
サーバーへの侵入で簡単に取得できてしまう。
保存の際に暗号化し、使うときに複合する

ハッシュ化
ハッシュ関数によって固定長の文字列に変換して保存。ハッシュ値の長さは関数の種類によって変わる。
送られてきたパスワードが保存されているハッシュ値と同じかどうかで正しいか判断する。
ハッシュ値からもとの文字列を割り出すことは困難

10
公開鍵証明書
アクセスしているwebサイトが本物かどうかを証明するもの
SSL証明書とも言う。SSL通信の公開鍵に使われることが多く、

役割は２つ
・持ち主が誰か
・持ち主が実在するか

認証局という第３者期間が発行。偽造にも強く身分証明書のような役割。

自己証明書
自分で自分を証明。オレオレ証明書。暗号化通信ができることの証明。
身内で試験的に発行する。
公開鍵証明書を発行するには費用と時間がかかるので。それまでの間。

11 認証
ログインなどの本人確認処理
google, facebook, twitter のアカウント情報を使う技術が開発され負担が減った。
個人情報を管理ぜずに会員サイトを運用できる。

認証API：アプリごとに対応が必要。
OpenID：認証処理を標準化したプロトコル。複数の企業が提供する認証サービスを同じ手順で使えるようにしたもの。

12 認可
ユーザーごとの権限に従って利用できるサービスの許可を行うこと

OAuth オーオース
サイトをまたいだ認可を実現するために標準化されたプロトコル
認可のみで認証は行わない
利用したいサービスをリソースと呼ぶ。トークンを発行して利用できるようにする
例)facebookに上げた投稿をtwitterにも流す。
facebookからtwitterにトークンを要求、twitterがトークンを発行、トークンを掲示してTwitterに同様の内容の投稿を行う
この場合、Twitterがリソース。

OpenID Connect
OAuth2.0をベースに認証機能が追加されたプロトコル
多くのサイトが移行を進めている

13 CAPTCHA
webサービスの悪用を防ぐために考案されたもの
コンピューターと人間を区別するためのテストの意味
例)歪んだ文字の読み取り、複数の画像から犬だけを選ぶ、簡単なパズル

