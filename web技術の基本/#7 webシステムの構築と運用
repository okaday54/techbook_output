01 提供するサービスの検討

webシステム構築する前に検討すること
・サービスの内容
・アプリケーションに必要な機能とデザイン
・システム基盤に必要な機能

サービス内容
何を提供するサービス化？どんな人を対象に？いつ使う？
などを検討し具体化していく

必要な機能とデザイン

データ管理するなら、、、
外部サービス連携するなら、、、
高齢者なら→文字大きく
スマホ向けなら、、小さくても操作できるように

02 利用言語、ソフトウェアの検討
主な言語
Javascript, Perl, Python, PHP, Ruby, Java, VisualBasic. C#

サーバーのOSを決める
基本的にはWindowsかLinux

windows→普及率が高く脆弱性が狙われ易い。ライセンス料が高額
Linux→操作性がwindowsと異なる、無償または安価でライセンスが利用できる。

ミドルウェア
OSとアプリケーションの中間に位置するもの
例9 webサーバー, APサーバー, DBMS など
OSによって選択肢が絞られる
例) microsoftのIIS, SQL server はwindowsでしか使えない

(ミドルウェア)
webサーバー
Apache：無償最も利用されている
nginx：有償サポート。シンプルで動作が軽快
IIS ：windowsに標準装備。Linuxでは使えない

APサーバー
Tomcat：無償。Apacheと組み合わせてよく使われる
JBoss：有償。
IIS：同上

DBMS
Oracle：高機能。かなり高価。
MySQL,PostgreSQL.SQLite：シンプルな機能。無償
SQL Server：高機能。高価。windowsで利用可能

03 ネットワーク構成の検討
セキュリティレベル、投入できるコストなどを元に構成を検討する

ネットワークの分割
大きく３種類
・外部ネットワーク
・内部ネットワーク
・DMZ：外部と内部の両方からアクセスを受けつつ、不正な通信を防ぐため内部の通信は最低限にする

04 サーバー構成の検討
ロードバランサー
リクエストをどのサーバーに転送するかを決める
均等に転送する事で、負荷を平準化しつつ処理する

コスト重視か、可用性重視か、方針を決めて構成を検討する

05 サーバー基盤の検討
自分で購入するか、誰かから借りるか

オンプレミス
自社運用を指す言葉
費用はかかるが構成の自由度が高い。初期投資が大きくなる。
クラウドが安価で自由度があるので徐々に少なくなっている

レンタルサーバー
すでに構築されているサーバーを利用する。自由度はほぼなく企業で利用されることはない。

クラウド
使ったぶんだけ料金が発生する。構成の自由度も高い。

06 負荷分散
サーバーを複数台並列に配置し、リクエストを振り分ける

ラウンドロビン方式
リクエストを順番に振り分ける。サーバー性能が同一であれば負荷を均等にできる。

動的分散方式
負荷の少ないサーバに振り分ける。

パーシステンス
同一のクライアントからのアクセスを判別し、常に同じサーバーに転送する。セッション管理に有効。

07 サーバー設計・構築
ディスク構成
HDDやSSD といったサーバーの記憶領域を指す
重要なデータはサーバーのシステムデータとは別のディスクに保管しておく
ディスクを内部で分割する、パーティショニングという方法もある。

セキュリティ
初期設定、ユーザーを見直す

システム基盤テスト
設定内容、自動起動の機能、ユーザーリスト(削除したユーザーはログインできないetc)

08 データベース設計
論理設計
格納すべきデータの洗い出しとデータ同士の関連性を定義

物理設計
文字列化数値か、整数か小数か、などどの種類で格納するかを決める。
頻繁に検索する対象のデータはインデックスを付けて検索速度が速くなるように設定しておいたりを検討する

09 アプリケーション設計
基本設計
外部設計と呼ばれる。機能の洗い出し。アプリケーションの構成。

詳細設計
内部設計とも呼ばれる。構成するプログラムのモジュールを作成。
例) 画面表示、注文登録、ログイン, 決済処理の具体的な動作の流れ
ログインしたら〇〇を表示、

テスト
詳細設計通りにモジュールが作られているか：単体テスト
モジュール同士が連携できているか：連結テスト

10 バックアップ運用
最も大事なもの→データ
サーバーが普及できても中身のデータが復旧できなければサービス再開できない
→バックアップ運用しておく

データセンターを分ける
頻度を多くして最新にする
何世代か前のデータも残しておく；データ改ざんなどに対応するため

11 ログ運用
サーバーやネットワーク機器の動作記録→テキストファイルで保存→ログファイルと呼ぶ

システムログ、アプリケーションログ、アクセスログなどがある。
ログファイルから、故障やバグの原因、サーバー攻撃の形跡などわかるためバックアップの対象とされることもある。
何もしないと膨大な量になるためログ運用・ログメンテナンスが必要。

ログローテーション
ハウスキープとも呼ばれる。
ログファイルの切り分け
１日、１週間、１ヶ月の単位
100MBなど容量で切り分けたりする

アクセスログ解析
ユーザーのアクセスした日時やどのページにきたかの情報
サービス向上、売上向上に繋がる分析ができる

12 webサイトのパフォーマンス
画面が表示されるまでの時間：パフォーマンス
利用者が多くなるとレスポンス効率が下がる。

パフォーマンスの指標
HTTPが返ってくるまでの応答時間
表示完了時間
ページ読み込み時間
エラーなくアクセスできた確立：可用性
が用いられる

パフォーマンスの監視
サーバーの負荷状態を監視することが有効
リクエストのひとつなので頻度や量が高すぎると逆に負荷になってしまう事に注意。

13 脆弱性診断
擬似的に攻撃を行い脆弱性の有無を確認するテスト：ペネトレーションテスト
セキュリティ企業に依頼して行うこともある。